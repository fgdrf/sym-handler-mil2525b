h1. Overview

This projects provides Mil 2525b symbols. In Java its quite easy to register additional URL Handlers, and thats the way how it works:

In the Class where the static main method exists add the follwing lines:

static {
   URL.setURLStreamHandlerFactory(new Mil2525bHandlerFactory());
}

Done.

To access Images just use URL's like this:

URL url = new URL("mil2525b://G-FPAA--------X")
url.openStream();


An easy way to handle images use ImageIO:

BufferedImage image = ImageIO.read(new URL(url));

Symbols are taken from the openmap project, please consult the License file at 
http://openmap.bbn.com/cgi-bin/viewvc.cgi/trunk/LICENSE?root=openmap&view=log

h1. How to build
Its a Maven project, type:
   mvn clean install

To make an Eclipse-Project just type
   mvn eclipse:eclipse

Import the project in Eclipse: `File->Import->Existing Projects into Workspace`. Done.

h1. Resources
* "http://docs.oracle.com/javase/1.5.0/docs/api/java/net/URLStreamHandler.html":http://docs.oracle.com/javase/1.5.0/docs/api/java/net/URLStreamHandler.html
* "http://docs.oracle.com/javase/1.5.0/docs/api/javax/imageio/ImageIO.html":http://docs.oracle.com/javase/1.5.0/docs/api/javax/imageio/ImageIO.html
* "http://www.mapsymbs.com/ms2525b_ch1_full.pdf":http://www.mapsymbs.com/ms2525b_ch1_full.pdf
* "http://openmap.bbn.com/cgi-bin/viewvc.cgi/trunk/lib/milStd2525_png.jar?root=openmap&view=log":http://openmap.bbn.com/cgi-bin/viewvc.cgi/trunk/lib/milStd2525_png.jar?root=openmap&view=log
